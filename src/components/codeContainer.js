import React, { Component } from 'react';

import SyntaxHighlighter from 'react-syntax-highlighter';
import { monokaiSublime } from 'react-syntax-highlighter/dist/styles';

class CodeContainer extends Component {
	render() {
		let codeString = "(function(){\n\nif(!document.body.addEventListener) {\n	return;\n}\n\n$$('[data-src][data-type=\"text/html\"]').forEach(function(element) {\n	var src = element.getAttribute('data-src'),\n	    html = element.getAttribute('data-type') === 'text/html',\n	    contentProperty = html? 'innerHTML' : 'textContent';\n\n	$u.xhr({\n		url: src,\n		callback: function(xhr) {\n			try {\n				element[contentProperty] = xhr.responseText;\n\n				// Run JS\n\n				$$('script', element).forEach(function (script) {\n					var after = script.nextSibling, parent = script.parentNode;\n					parent.removeChild(script);\n					document.head.appendChild(script);\n				});\n			}\n			catch (e) {}\n		}\n	});\n});\n\n})();\n\n/**\n * Table of contents\n */\n(function(){\nvar toc = document.createElement('ol');\n\n$$('body > section > h1').forEach(function(h1) {\n	var section = h1.parentNode,\n	    text = h1.textContent,\n	    id = h1.id || section.id;\n\n	// Assign id if one does not exist\n	if (!id) {\n		id = text.toLowerCase();\n\n		// Replace spaces with hyphens, only keep first 10 words\n		id = id.split(/\s+/g, 10).join('-');\n\n		// Remove non-word characters\n		id = id.replace(/[^\w-]/g, '');\n\n		section.id = id;\n	}\n\n	// Linkify heading text\n	if (h1.children.length === 0) {\n		h1.innerHTML = '';\n\n		$u.element.create('a', {\n			properties: {\n				href: window.location.pathname + '#' + id\n			},\n			contents: text,\n			inside: h1\n		});\n	}\n\n	$u.element.create('li', {\n		contents: {\n			tag: 'a',\n			properties: {\n				href: window.location.pathname + '#' + (h1.id || section.id)\n			},\n			contents: text\n		},\n		inside: toc\n	});\n});\n\nif (toc.children.length > 0) {\n	$u.element.create('section', {\n		properties: {\n			id: 'toc'\n		},\n		contents: [{\n			tag: 'h1',\n			contents: 'On this page'\n		}, toc],\n		before: $('body > section')\n	});\n}\n\n})();\n\n// calc()\n(function(){\n	if(!window.PrefixFree) return;\n\n	if (PrefixFree.functions.indexOf('calc') == -1) {\n		var style = document.createElement('_').style;\n		style.width = 'calc(1px + 1%)'\n\n		if(!style.width) {\n			// calc not supported\n			var header = $('header'),\n			    footer = $('footer');\n\n			function calculatePadding() {\n				header.style.padding =\n				footer.style.padding = '30px ' + (innerWidth/2 - 450) + 'px';\n			}\n\n			addEventListener('resize', calculatePadding);\n			calculatePadding();\n		}\n	}\n})();\n\n(function() {\nvar p = $u.element.create('p', {\n	properties: {\n		id: 'theme'\n	},\n	contents: {\n		tag: 'p',\n		contents: 'Theme:'\n	},\n	after: '.intro'\n});\n\nvar themes = components.themes;\nvar current = (location.search.match(/theme=([\w-]+)/) || [])[1];\n\nif (!(current in themes)) {\n	current = undefined;\n}\n\nif (current === undefined) {\n	var stored = localStorage.getItem('theme');\n\n	current = stored in themes? current = stored : 'prism';\n}\n\nfunction setTheme(id) {\n	var link = $$('link[href^=\"themes/prism\"]')[0];\n\n	link.href = themes.meta.path.replace(/\{id}/g, id);\n	localStorage.setItem('theme', id);\n}\n\nfor (var id in themes) {\n\n	if (id === 'meta') {\n		continue;\n	}\n\n	$u.element.create('input', {\n		properties: {\n			type: 'radio',\n			name: \"theme\",\n			id: 'theme=' + id,\n			checked: current === id,\n			value: id,\n			onclick: function () {\n				setTheme(this.value);\n			}\n		},\n		inside: p\n	});\n\n	$u.element.create('label', {\n		properties: {\n			htmlFor: 'theme=' + id\n		},\n		contents: themes[id].title || themes[id],\n		inside: p\n	});\n}\n\nsetTheme(current);\n})();\n\n(function(){\n\nfunction listPlugins(ul) {\n	for (var id in components.plugins) {\n		if (id == 'meta') {\n			continue;\n		}\n\n		var plugin = components.plugins[id];\n\n		$u.element.create('li', {\n			contents: {\n				tag: 'a',\n				prop: {\n					href: 'plugins/' + id\n				},\n				contents: plugin.title || plugin\n			},\n			inside: ul\n		});\n	}\n}\n\n$$('.plugin-list').forEach(listPlugins);\n\n})();";
		return (
			<div style={{overflow: "scroll", height: "100%"}}>
				<div className="justify-content-center markdownContainer" style={{width: "60%", height: "100%", margin: "30px auto", display: "block"}}>
					<SyntaxHighlighter language='javascript' showLineNumbers={true} style={monokaiSublime}>{codeString}</SyntaxHighlighter>
				</div>
			</div>
		);
	}
}

export default CodeContainer;